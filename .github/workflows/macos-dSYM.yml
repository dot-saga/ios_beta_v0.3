name: macOS dSYM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Xcode version
        run: xcodebuild -version

      - name: Detect workspace/project & validate scheme
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Find workspace/project at repo root
          WS=$(ls -1d *.xcworkspace 2>/dev/null | head -n1 || true)
          PR=$(ls -1d *.xcodeproj    2>/dev/null | head -n1 || true)
          if [[ -n "$WS" ]]; then
            echo "workspace=$WS" >> $GITHUB_OUTPUT
            xcodebuild -list -workspace "$WS" || true
          elif [[ -n "$PR" ]]; then
            echo "project=$PR" >> $GITHUB_OUTPUT
            xcodebuild -list -project "$PR" || true
          else
            echo "::error::No .xcworkspace or .xcodeproj found at repo root.";
            exit 64
          fi

          SCHEME="dot SAGA"    # adjust if your scheme name differs
          echo "scheme=$SCHEME" >> $GITHUB_OUTPUT

          # Verify shared scheme exists somewhere in the repo
          if ! grep -Rqs "<Scheme" **/"$SCHEME".xcscheme ; then
            echo "::error::Shared scheme '$SCHEME' not found. In Xcode: Product → Scheme → Manage Schemes… → check 'Shared', commit the .xcscheme file.";
            exit 64
          fi

      - name: Build (Simulator, no code signing)
        shell: bash
        run: |
          set -euo pipefail
          DEST='generic/platform=iOS Simulator'
          if [[ -n "${{ steps.detect.outputs.workspace || '' }}" ]]; then
            xcodebuild \
              -workspace "${{ steps.detect.outputs.workspace }}" \
              -scheme    "${{ steps.detect.outputs.scheme }}" \
              -configuration Release \
              -destination "$DEST" \
              CODE_SIGNING_ALLOWED=NO \
              build
          else
            xcodebuild \
              -project   "${{ steps.detect.outputs.project }}" \
              -scheme    "${{ steps.detect.outputs.scheme }}" \
              -configuration Release \
              -destination "$DEST" \
              CODE_SIGNING_ALLOWED=NO \
              build
          fi

      - name: Zip dSYM artifacts (if any)
        run: |
          mkdir -p artifacts
          dsym_count=$(find ~/Library/Developer/Xcode/DerivedData -name "*.dSYM" | wc -l | tr -d ' ')
          if [ "$dsym_count" -gt 0 ]; then
            find ~/Library/Developer/Xcode/DerivedData -name "*.dSYM" -print0 | xargs -0 zip -r artifacts/dsym-files.zip
          else
            echo "No dSYM files found."
          fi

      - name: Upload dSYM
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dsym-files
          path: artifacts/dsym-files.zip
          if-no-files-found: ignore
